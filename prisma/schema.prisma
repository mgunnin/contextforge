// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  name              String?
  passwordHash      String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  apiKeys           ApiKey[]
  items             Item[]
  collections       Collection[]
  imports           Import[]
  auditLogs         AuditLog[]
  folderSuggestions FolderSuggestion[]
  // New intelligent context relationships
  contextTemplates  ContextTemplate[]
  contextGenerations ContextGeneration[]
  semanticSearches  SemanticSearch[]
  scheduledExports  ScheduledExport[]
  settings          String       @default("{}")
  automationLevel   String       @default("auto-suggest")
  preferences       String       @default("{}")
}

model ApiKey {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  provider        String   // openai, anthropic, gemini
  encryptedKey    String
  lastUsedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Item {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            String          // prompt, agent, rule, template, snippet, other
  subType         String?         // More specific categorization
  name            String
  content         String
  format          String          // .af, .prompt, .agent, .json, .yaml, .xml, .md, .mdc
  metadata        String          @default("{}")
  author          String?
  language        String?
  targetModels    String?         // comma-separated: openai,claude,gemini
  sourceId        String?
  source          Source?         @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  isCanonical     Boolean         @default(false)
  isDuplicate     Boolean         @default(false)
  canonicalId     String?
  canonical       Item?           @relation("DuplicateRelation", fields: [canonicalId], references: [id], onDelete: SetNull)
  duplicates      Item[]          @relation("DuplicateRelation")
  versions        Version[]
  tags            ItemTag[]
  collections     ItemCollection[]
  optimizations   Optimization[]
  conversions     Conversion[]
  auditLogs       AuditLog[]
  // New intelligent context relationships
  embedding       ItemEmbedding?
  clusters        SemanticClusterItem[]
  templateItems   ContextTemplateItem[]
  generationItems ContextGenerationItem[]
  modelOptimizations ModelOptimization[]
  summary         ContentSummary?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId, type])
  @@index([name])
}

model Version {
  id              String   @id @default(cuid())
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  versionNumber   Int
  content         String
  metadata        String   @default("{}")
  changeReason    String?
  changedBy       String?  // LLM agent or user
  approved        Boolean  @default(false)
  approvedBy      String?
  createdAt       DateTime @default(now())

  @@unique([itemId, versionNumber])
  @@index([itemId])
}

model Source {
  id              String   @id @default(cuid())
  type            String   // file, github, website
  url             String?
  filePath        String?
  repoOwner       String?
  repoName        String?
  branch          String?
  pathGlob        String?
  lastImportedAt  DateTime?
  items           Item[]
  imports         Import[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([type])
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  color           String?
  description     String?
  items           ItemTag[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ItemTag {
  id              String   @id @default(cuid())
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tagId           String
  tag             Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())

  @@unique([itemId, tagId])
  @@index([itemId])
  @@index([tagId])
}

model Collection {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  color           String?
  icon            String?
  path            String?          // Full path like "/prompts/development/backend"
  parentId        String?          // Self-referencing for hierarchy
  parent          Collection?      @relation("CollectionHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        Collection[]     @relation("CollectionHierarchy")
  level           Int              @default(0) // Depth level for easier querying
  isFolder        Boolean          @default(true) // Distinguish between folders and collections
  sortOrder       Int              @default(0) // Custom sorting within parent
  isTemplate      Boolean          @default(false) // Mark as template folder
  autoOrganize    Boolean          @default(false) // Enable auto-organization
  organizationRules String         @default("{}") // JSON rules for auto-organization
  permissions     String           @default("{}") // JSON permissions for sharing
  analytics       String           @default("{}") // JSON analytics data
  items           ItemCollection[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, path])
  @@unique([userId, parentId, name])
  @@index([userId])
  @@index([parentId])
  @@index([path])
  @@index([level])
}

model ItemCollection {
  id              String     @id @default(cuid())
  itemId          String
  item            Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  collectionId    String
  collection      Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  position        Int        @default(0)
  createdAt       DateTime   @default(now())

  @@unique([itemId, collectionId])
  @@index([itemId])
  @@index([collectionId])
}

model Import {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceId        String?
  source          Source?   @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  status          String    // pending, processing, completed, failed
  totalFiles      Int       @default(0)
  processedFiles  Int       @default(0)
  failedFiles     Int       @default(0)
  metadata        String    @default("{}")
  errorLog        String?
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  createdAt       DateTime  @default(now())

  @@index([userId])
  @@index([status])
}

model Optimization {
  id              String   @id @default(cuid())
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  targetModel     String   // openai, claude, gemini
  optimizedContent String
  confidence      Float?
  status          String   // suggested, accepted, rejected
  metadata        String   @default("{}")
  createdBy       String   // LLM agent
  createdAt       DateTime @default(now())
  reviewedAt      DateTime?
  reviewedBy      String?

  @@index([itemId, targetModel])
  @@index([status])
}

model Conversion {
  id              String   @id @default(cuid())
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  fromFormat      String
  toFormat        String
  convertedContent String
  status          String   // suggested, accepted, rejected
  metadata        String   @default("{}")
  createdBy       String   // LLM agent or user
  createdAt       DateTime @default(now())
  reviewedAt      DateTime?
  reviewedBy      String?

  @@index([itemId])
  @@index([status])
}

model AuditLog {
  id              String   @id @default(cuid())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  itemId          String?
  item            Item?    @relation(fields: [itemId], references: [id], onDelete: SetNull)
  action          String   // import, classify, optimize, convert, approve, reject, delete, update, etc.
  entityType      String   // item, collection, source, etc.
  entityId        String?
  metadata        String   @default("{}")
  previousValue   String?
  newValue        String?
  userAgent       String?
  ipAddress       String?
  createdAt       DateTime @default(now())

  @@index([userId])
  @@index([itemId])
  @@index([action])
  @@index([createdAt])
}

model WorkflowQueue {
  id              String   @id @default(cuid())
  type            String   // classification, optimization, conversion, deduplication, folder_suggestion
  status          String   // pending, processing, completed, failed
  priority        Int      @default(0)
  payload         String
  result          String?
  error           String?
  retryCount      Int      @default(0)
  maxRetries      Int      @default(3)
  scheduledFor    DateTime @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime @default(now())

  @@index([status, priority])
  @@index([type])
}

model FolderSuggestion {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestedPath   String   // AI-suggested folder path
  rationale       String?  // Why this folder structure was suggested
  confidence      Float    @default(0.0) // AI confidence score
  itemIds         String   // JSON array of item IDs that would fit this folder
  status          String   @default("pending") // pending, accepted, rejected, applied
  appliedAt       DateTime?
  createdAt       DateTime @default(now())

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model FolderTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  structure       String   // JSON representation of folder structure
  rules           String   @default("{}") // JSON rules for auto-assignment
  category        String?  // prompts, agents, rules, etc.
  isPublic        Boolean  @default(false)
  usageCount      Int      @default(0)
  createdBy       String?
  createdAt       DateTime @default(now())

  @@index([category])
  @@index([isPublic])
}

// Embeddings and semantic analysis models
model ItemEmbedding {
  id              String   @id @default(cuid())
  itemId          String   @unique
  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  provider        String   // openai, sentence-transformers, etc.
  model           String   // text-embedding-3-small, all-MiniLM-L6-v2, etc.
  embedding       String   // JSON array of embedding values
  dimensions      Int      // Number of dimensions in the embedding
  tokenCount      Int?     // Number of tokens in the original content
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([itemId])
  @@index([provider, model])
}

model SemanticCluster {
  id              String             @id @default(cuid())
  name            String
  description     String?
  centroid        String             // JSON array representing cluster center
  algorithm       String             // kmeans, hierarchical, etc.
  threshold       Float              // Similarity threshold for cluster membership
  itemCount       Int                @default(0)
  items           SemanticClusterItem[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([algorithm])
  @@index([itemCount])
}

model SemanticClusterItem {
  id              String          @id @default(cuid())
  clusterId       String
  cluster         SemanticCluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  itemId          String
  item            Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  similarity      Float           // Similarity to cluster centroid
  createdAt       DateTime        @default(now())

  @@unique([clusterId, itemId])
  @@index([clusterId])
  @@index([itemId])
  @@index([similarity])
}

model ContextTemplate {
  id              String               @id @default(cuid())
  userId          String?
  user            User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  name            String
  description     String?
  template        String               // Template content with placeholders
  variables       String               @default("{}") // JSON schema for template variables
  targetModel     String?              // Optimized for specific model
  category        String?              // Use case category
  quality         Float?               // Quality score 0-1
  usageCount      Int                  @default(0)
  isPublic        Boolean              @default(false)
  items           ContextTemplateItem[]
  generations     ContextGeneration[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([userId])
  @@index([category])
  @@index([targetModel])
  @@index([quality])
}

model ContextTemplateItem {
  id              String           @id @default(cuid())
  templateId      String
  template        ContextTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  itemId          String
  item            Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  position        Int              @default(0)
  role            String?          // system, user, assistant, context
  weight          Float            @default(1.0) // Importance weight
  createdAt       DateTime         @default(now())

  @@unique([templateId, itemId])
  @@index([templateId])
  @@index([itemId])
  @@index([position])
}

model ContextGeneration {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId      String?
  template        ContextTemplate?   @relation(fields: [templateId], references: [id], onDelete: SetNull)
  intent          String             // User's intent or goal
  query           String?            // Original query or prompt
  assemblyStrategy String            // automatic, semantic, manual, hybrid
  generatedContext String            // Final assembled context
  tokenCount      Int?               // Total tokens in generated context
  cost            Float?             // Estimated cost for target model
  targetModel     String?            // Target AI model
  quality         Float?             // Quality score 0-1
  confidence      Float?             // Confidence in assembly 0-1
  metadata        String             @default("{}") // Additional generation metadata
  items           ContextGenerationItem[]
  createdAt       DateTime           @default(now())

  @@index([userId])
  @@index([templateId])
  @@index([targetModel])
  @@index([quality])
  @@index([createdAt])
}

model ContextGenerationItem {
  id              String            @id @default(cuid())
  generationId    String
  generation      ContextGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)
  itemId          String
  item            Item              @relation(fields: [itemId], references: [id], onDelete: Cascade)
  position        Int               @default(0)
  relevanceScore  Float?            // How relevant this item is to the intent
  includedTokens  Int?              // Tokens from this item included in context
  reason          String?           // Why this item was included
  createdAt       DateTime          @default(now())

  @@unique([generationId, itemId])
  @@index([generationId])
  @@index([itemId])
  @@index([position])
  @@index([relevanceScore])
}

model ModelOptimization {
  id              String   @id @default(cuid())
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  targetModel     String   // openai-gpt4, anthropic-claude3, etc.
  optimizedContent String
  originalTokens  Int?
  optimizedTokens Int?
  tokenSavings    Int?     // originalTokens - optimizedTokens
  costEstimate    Float?   // Estimated cost for target model
  qualityScore    Float?   // Quality of optimization 0-1
  strategy        String   // compression, restructuring, formatting, etc.
  metadata        String   @default("{}")
  status          String   @default("pending") // pending, approved, rejected
  createdBy       String   // system, user, or specific agent
  reviewedBy      String?
  createdAt       DateTime @default(now())
  reviewedAt      DateTime?

  @@unique([itemId, targetModel])
  @@index([itemId])
  @@index([targetModel])
  @@index([status])
  @@index([qualityScore])
}

model ContentSummary {
  id              String   @id @default(cuid())
  itemId          String   @unique
  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  summary         String   // AI-generated summary
  keyPoints       String   @default("[]") // JSON array of key points
  entities        String   @default("[]") // JSON array of extracted entities
  concepts        String   @default("[]") // JSON array of concepts
  complexity      String?  // simple, moderate, complex
  readabilityScore Float?  // 0-1 readability score
  sentimentScore  Float?   // -1 to 1 sentiment
  language        String?  // Detected language
  wordCount       Int?
  createdBy       String   // AI model used for generation
  confidence      Float?   // Confidence in summary quality
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([complexity])
  @@index([language])
  @@index([confidence])
}

model SemanticSearch {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  query           String   // Original search query
  queryEmbedding  String   // JSON array of query embedding
  results         String   // JSON array of search results with scores
  resultCount     Int
  algorithm       String   // cosine, euclidean, dot_product
  threshold       Float    // Similarity threshold used
  executionTime   Int?     // Milliseconds to execute
  createdAt       DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model ScheduledExport {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String   // Display name for the scheduled export
  format            String   // pdf, csv, json, xlsx, png
  reportType        String   // summary, detailed, custom
  timeRange         String   // 7d, 30d, 90d, 1y, custom
  sections          String   // JSON array of section IDs
  includeCharts     Boolean  @default(true)
  includeRawData    Boolean  @default(false)
  recipients        String   // JSON array of email addresses
  frequency         String   // daily, weekly, monthly
  scheduledTime     String   // HH:MM format
  isActive          Boolean  @default(true)
  nextExecution     DateTime
  lastExecution     DateTime?
  customTitle       String?
  customDescription String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([nextExecution])
  @@index([isActive])
}
