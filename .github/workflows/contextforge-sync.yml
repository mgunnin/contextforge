name: ContextForge Sync

on:
  push:
    branches: [main, develop]
    paths:
      - 'prompts/**'
      - 'contexts/**'
      - 'rules/**'
      - 'agents/**'
      - '.contextforge/**'
  pull_request:
    branches: [main]
    paths:
      - 'prompts/**'
      - 'contexts/**'
      - 'rules/**'
      - 'agents/**'
      - '.contextforge/**'
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Sync mode'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - force
        - dry-run
      target_folder:
        description: 'Target folder (optional)'
        required: false
        type: string

env:
  CONTEXTFORGE_API_URL: ${{ vars.CONTEXTFORGE_API_URL || 'https://api.contextforge.com' }}
  CONTEXTFORGE_API_KEY: ${{ secrets.CONTEXTFORGE_API_KEY }}

jobs:
  validate-config:
    runs-on: ubuntu-latest
    outputs:
      has-config: ${{ steps.check.outputs.has-config }}
      sync-enabled: ${{ steps.check.outputs.sync-enabled }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check ContextForge configuration
        id: check
        run: |
          if [ -f ".contextforge/config.yaml" ] || [ -f ".contextforge/config.yml" ]; then
            echo "has-config=true" >> $GITHUB_OUTPUT
            
            # Check if sync is enabled
            if grep -q "sync.*enabled.*true" .contextforge/config.y*ml 2>/dev/null; then
              echo "sync-enabled=true" >> $GITHUB_OUTPUT
            else
              echo "sync-enabled=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has-config=false" >> $GITHUB_OUTPUT
            echo "sync-enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate API key
        if: steps.check.outputs.has-config == 'true'
        run: |
          if [ -z "$CONTEXTFORGE_API_KEY" ]; then
            echo "‚ùå CONTEXTFORGE_API_KEY secret is not set"
            echo "Please add your ContextForge API key to repository secrets"
            exit 1
          fi

  sync-changes:
    needs: validate-config
    if: needs.validate-config.outputs.has-config == 'true' && needs.validate-config.outputs.sync-enabled == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better change detection

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install ContextForge CLI
        run: pnpm add -g @contextforge/cli
          # Or use npx for latest version: npx @contextforge/cli@latest

      - name: Configure ContextForge CLI
        run: |
          contextforge config set apiUrl "$CONTEXTFORGE_API_URL"
          contextforge config set apiKey "$CONTEXTFORGE_API_KEY"

      - name: Test API connection
        run: |
          echo "üîç Testing ContextForge API connection..."
          contextforge health

      - name: Detect changed files
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # For push events, compare with previous commit
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E '\.(md|txt|yaml|yml|json)$' | grep -E '^(prompts|contexts|rules|agents)/' || true)
          else
            # For PRs, compare with base branch
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(md|txt|yaml|yml|json)$' | grep -E '^(prompts|contexts|rules|agents)/' || true)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo "changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Import new/changed files
        if: steps.changes.outputs.changed-files != ''
        run: |
          echo "üìÅ Importing changed files to ContextForge..."
          
          # Read configuration
          TARGET_FOLDER="${{ github.event.inputs.target_folder }}"
          if [ -z "$TARGET_FOLDER" ] && [ -f ".contextforge/config.yaml" ]; then
            TARGET_FOLDER=$(grep "default_folder" .contextforge/config.yaml | cut -d':' -f2 | xargs)
          fi
          
          SYNC_MODE="${{ github.event.inputs.sync_mode || 'auto' }}"
          
          # Import files
          echo "${{ steps.changes.outputs.changed-files }}" | while read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              echo "Importing: $file"
              
              IMPORT_ARGS=""
              if [ -n "$TARGET_FOLDER" ]; then
                IMPORT_ARGS="$IMPORT_ARGS --folder '$TARGET_FOLDER'"
              fi
              
              if [ "$SYNC_MODE" = "dry-run" ]; then
                IMPORT_ARGS="$IMPORT_ARGS --dry-run"
              fi
              
              # Determine type based on directory
              if [[ "$file" == prompts/* ]]; then
                IMPORT_ARGS="$IMPORT_ARGS --type prompt"
              elif [[ "$file" == rules/* ]]; then
                IMPORT_ARGS="$IMPORT_ARGS --type rule"
              elif [[ "$file" == agents/* ]]; then
                IMPORT_ARGS="$IMPORT_ARGS --type agent"
              fi
              
              # Add auto-optimization and classification
              IMPORT_ARGS="$IMPORT_ARGS --classify --optimize"
              
              eval "contextforge import file '$file' $IMPORT_ARGS"
            fi
          done

      - name: Generate sync report
        if: steps.changes.outputs.changed-files != ''
        run: |
          echo "üìä Generating sync report..."
          
          # Create a summary
          CHANGED_COUNT=$(echo "${{ steps.changes.outputs.changed-files }}" | wc -l)
          
          cat > sync-report.md << EOF
          # ContextForge Sync Report
          
          **Workflow:** ${{ github.workflow }}
          **Trigger:** ${{ github.event_name }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Summary
          - **Files processed:** $CHANGED_COUNT
          - **Sync mode:** ${{ github.event.inputs.sync_mode || 'auto' }}
          - **Target folder:** ${{ github.event.inputs.target_folder || 'default' }}
          
          ## Changed Files
          \`\`\`
          ${{ steps.changes.outputs.changed-files }}
          \`\`\`
          
          ## Actions Taken
          - ‚úÖ Files imported to ContextForge
          - ‚úÖ Content automatically classified
          - ‚úÖ Content automatically optimized
          
          EOF
          
          echo "Sync report generated:"
          cat sync-report.md

      - name: Upload sync report
        if: steps.changes.outputs.changed-files != ''
        uses: actions/upload-artifact@v4
        with:
          name: contextforge-sync-report
          path: sync-report.md
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.changes.outputs.changed-files != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('sync-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  notify-status:
    needs: [validate-config, sync-changes]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify success
        if: needs.sync-changes.result == 'success'
        run: |
          echo "‚úÖ ContextForge sync completed successfully"
          
      - name: Notify failure
        if: needs.sync-changes.result == 'failure'
        run: |
          echo "‚ùå ContextForge sync failed"
          echo "Check the logs above for details"
          exit 1
          
      - name: Notify skipped
        if: needs.validate-config.outputs.sync-enabled == 'false'
        run: |
          echo "‚ÑπÔ∏è ContextForge sync is disabled or not configured"
          echo "To enable sync:"
          echo "1. Create .contextforge/config.yaml in your repository"
          echo "2. Set sync.enabled: true in the configuration"
          echo "3. Add CONTEXTFORGE_API_KEY to repository secrets"