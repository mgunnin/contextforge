name: ContextForge Export

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      export_format:
        description: 'Export format'
        required: true
        default: 'files'
        type: choice
        options:
        - files
        - json
        - yaml
        - markdown
      include_metadata:
        description: 'Include metadata'
        required: false
        default: true
        type: boolean
      folder_filter:
        description: 'Folder to export (optional)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

env:
  CONTEXTFORGE_API_URL: ${{ vars.CONTEXTFORGE_API_URL || 'https://api.contextforge.com' }}
  CONTEXTFORGE_API_KEY: ${{ secrets.CONTEXTFORGE_API_KEY }}

jobs:
  export-contexts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install ContextForge CLI
        run: pnpm add -g @contextforge/cli

      - name: Configure ContextForge CLI
        run: |
          contextforge config set apiUrl "$CONTEXTFORGE_API_URL"
          contextforge config set apiKey "$CONTEXTFORGE_API_KEY"

      - name: Verify API connection
        run: contextforge health

      - name: Create export directory
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          EXPORT_DIR="exports/contextforge_export_$TIMESTAMP"
          mkdir -p "$EXPORT_DIR"
          echo "EXPORT_DIR=$EXPORT_DIR" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: Export contexts
        run: |
          echo "ðŸ”„ Exporting contexts from ContextForge..."
          
          FORMAT="${{ github.event.inputs.export_format || 'files' }}"
          INCLUDE_METADATA="${{ github.event.inputs.include_metadata || 'true' }}"
          FOLDER_FILTER="${{ github.event.inputs.folder_filter }}"
          
          EXPORT_ARGS="--format $FORMAT"
          
          if [ "$INCLUDE_METADATA" = "true" ]; then
            EXPORT_ARGS="$EXPORT_ARGS --include-metadata"
          fi
          
          if [ -n "$FOLDER_FILTER" ]; then
            EXPORT_ARGS="$EXPORT_ARGS --folder '$FOLDER_FILTER'"
          fi
          
          # Create subdirectories for different types
          mkdir -p "$EXPORT_DIR"/{prompts,rules,agents,collections}
          
          # Export by type
          echo "Exporting prompts..."
          eval "contextforge export '$EXPORT_DIR/prompts' --type prompt $EXPORT_ARGS"
          
          echo "Exporting rules..."
          eval "contextforge export '$EXPORT_DIR/rules' --type rule $EXPORT_ARGS"
          
          echo "Exporting agents..."
          eval "contextforge export '$EXPORT_DIR/agents' --type agent $EXPORT_ARGS"
          
          echo "Exporting collections..."
          eval "contextforge export '$EXPORT_DIR/collections' --type collection $EXPORT_ARGS"

      - name: Generate export manifest
        run: |
          echo "ðŸ“‹ Generating export manifest..."
          
          cat > "$EXPORT_DIR/MANIFEST.md" << EOF
          # ContextForge Export Manifest
          
          **Export Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Format:** ${{ github.event.inputs.export_format || 'files' }}
          **Include Metadata:** ${{ github.event.inputs.include_metadata || 'true' }}
          **Folder Filter:** ${{ github.event.inputs.folder_filter || 'All folders' }}
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          
          ## Directory Structure
          
          \`\`\`
          $(tree "$EXPORT_DIR" || find "$EXPORT_DIR" -type f | head -20)
          \`\`\`
          
          ## Statistics
          
          - **Prompts:** $(find "$EXPORT_DIR/prompts" -type f | wc -l) files
          - **Rules:** $(find "$EXPORT_DIR/rules" -type f | wc -l) files
          - **Agents:** $(find "$EXPORT_DIR/agents" -type f | wc -l) files
          - **Collections:** $(find "$EXPORT_DIR/collections" -type f | wc -l) files
          - **Total Size:** $(du -sh "$EXPORT_DIR" | cut -f1)
          
          ## Usage
          
          This export can be imported back into ContextForge using:
          
          \`\`\`bash
          contextforge import directory ./prompts --type prompt --classify
          contextforge import directory ./rules --type rule --classify
          contextforge import directory ./agents --type agent --classify
          contextforge import directory ./collections --type collection --classify
          \`\`\`
          
          EOF

      - name: Create archive
        run: |
          echo "ðŸ“¦ Creating export archive..."
          cd exports
          tar -czf "contextforge_export_$TIMESTAMP.tar.gz" "contextforge_export_$TIMESTAMP"
          
          # Also create a zip for broader compatibility
          zip -r "contextforge_export_$TIMESTAMP.zip" "contextforge_export_$TIMESTAMP"
          
          echo "ARCHIVE_TAR=exports/contextforge_export_$TIMESTAMP.tar.gz" >> $GITHUB_ENV
          echo "ARCHIVE_ZIP=exports/contextforge_export_$TIMESTAMP.zip" >> $GITHUB_ENV

      - name: Upload export artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contextforge-export-${{ env.TIMESTAMP }}
          path: |
            ${{ env.EXPORT_DIR }}
            ${{ env.ARCHIVE_TAR }}
            ${{ env.ARCHIVE_ZIP }}
          retention-days: 90

      - name: Commit export to repository
        if: github.event_name == 'schedule' || github.event.inputs.create_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Copy export to versioned directory
          cp -r "$EXPORT_DIR" "backups/$(basename $EXPORT_DIR)"
          
          git add backups/
          git commit -m "chore: automated ContextForge export - $TIMESTAMP" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      - name: Create GitHub Release
        if: github.event.inputs.create_release == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: export-${{ env.TIMESTAMP }}
          name: ContextForge Export ${{ env.TIMESTAMP }}
          body: |
            # ContextForge Export ${{ env.TIMESTAMP }}

            Automated export of ContextForge contexts.

            **Export Details:**
            - Format: ${{ github.event.inputs.export_format || 'files' }}
            - Metadata included: ${{ github.event.inputs.include_metadata || 'true' }}
            - Folder filter: ${{ github.event.inputs.folder_filter || 'All folders' }}

            **Files:**
            - `contextforge_export_${{ env.TIMESTAMP }}.tar.gz` - Compressed archive
            - `contextforge_export_${{ env.TIMESTAMP }}.zip` - Zip archive

            See the manifest file in the archive for detailed statistics and import instructions.
          draft: false
          prerelease: false
          files: |
            ${{ env.ARCHIVE_TAR }}
            ${{ env.ARCHIVE_ZIP }}

      - name: Generate summary
        if: always()
        run: |
          echo "## ContextForge Export Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $TIMESTAMP" >> $GITHUB_STEP_SUMMARY
          echo "**Format:** ${{ github.event.inputs.export_format || 'files' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$EXPORT_DIR/MANIFEST.md" ]; then
            echo "### Export Statistics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -A 10 "## Statistics" "$EXPORT_DIR/MANIFEST.md" | tail -n +2 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi